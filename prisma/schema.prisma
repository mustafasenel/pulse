// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  surname        String?
  username       String?   @unique
  email          String?   @unique
  tel            String?
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  bio            String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  //Links
  links          String[]

  // Relations
  account        Account[]
  education      Education[]
  workExperience WorkExperience[]
  certifications Certification[]
  posts          Post[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  thumbnail String?
  summary   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?  @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])

  postCategories PostCategory[] // Relation field
}

model Category {
  id    String         @id @default(auto()) @map("_id") @db.ObjectId
  name  String         @unique
  posts PostCategory[] // Relation field
}

model PostCategory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  postId     String @db.ObjectId
  categoryId String @db.ObjectId

  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([postId, categoryId]) // Ensures unique combinations
}

model Education {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  school    String
  degree    String?
  field     String
  detail    String?
  startDate DateTime
  endDate   DateTime?
  currentlyWorking Boolean?
  userId    String?   @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id])
}

model WorkExperience {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  company          String
  role             String
  detail           String?
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean?
  userId           String?   @db.ObjectId
  user             User?     @relation(fields: [userId], references: [id])
}

model Certification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  issuer     String
  dateIssued DateTime
  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id])
}
